AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Create resources VPC, AZ and 2 EC2 instance. one master and node for cluster centos
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: aws-agahie-key
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  TagName:
    Type: String
    Default: tagCF
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.medium
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-9c0638f9
    us-west-1:
      AMI: ami-9c0638f9
    us-east-2:
      AMI: ami-9c0638f9
    eu-west-1:
      AMI: ami-9c0638f9
Resources:
  LabVPCKube:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.200.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: globalTG
        Value: !Ref TagName        
  LabInternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
        VpcId: !Ref LabVPCKube
        InternetGatewayId: !Ref LabInternetGateway
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPCKube
      CidrBlock: 10.200.10.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: globalTG
        Value: !Ref TagName
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LabVPCKube
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: LabInternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref LabInternetGateway
      RouteTableId: !Ref PublicRouteTable
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'Internet Group'
      GroupDescription: "SSH traffic in, all traffic out."
      VpcId: !Ref LabVPCKube
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8090'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '30000'
          ToPort: '32767'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '6443'
          ToPort: '6443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '2379'
          ToPort: '2380'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8443'
          ToPort: '8443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '10250'
          ToPort: '10252'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  MasterNode:
    Type: AWS::EC2::Instance    
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      SecurityGroupIds:
        - !Ref EC2SecurityGroup     
      InstanceType: t2.medium
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: globalTG
        Value: !Ref TagName
  SlaveNode:
    Type: AWS::EC2::Instance    
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      SecurityGroupIds:
        - !Ref EC2SecurityGroup     
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: globalTG
        Value: !Ref TagName
